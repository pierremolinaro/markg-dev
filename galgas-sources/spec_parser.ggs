//------------------------------------------------------------------------------------------------
//                                      
//   S Y N T A X                        
//                                      
//------------------------------------------------------------------------------------------------

syntax spec_parser (spec_scanner) {

rule <axiome>(
  !@uint outHashMapSize,
  !@uint outGarbagePeriod,
  !@typeVarMap outPlacesMap,
  !@typeTransitionList outTransitionList,
  !@typeInitialMarkingList outInitialMarkingList,
  !@countList outCountList)

rule <parse_precondition>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions)

rule <term>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions)

rule <factor>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions)

rule <primary>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions)

rule <parse_postcondition>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePostconditionList outPostConditionsList)

rule <parse_constant>(
  ?!@typeCstMap ioConstantMap,
  !@bool outSign,
  !@luint outValue)

rule <parse_bound>(
 !@uint lowTemporalBound,
 !@uint highTemporalBound)

//------------------------------------------------------------------------------------------------

rule <parse_precondition>(
  ?!@typeVarMap inPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions) {
  <term>( !?inPlacesMap, !?ioConstantMap, ?outPreConditions)
  repeat
  while
    $|$
    <term>( !?inPlacesMap, !?ioConstantMap, ?let right)
    outPreConditions = @typeOrExpression ( !outPreConditions, !right)
  end
}

//------------------------------------------------------------------------------------------------

rule <term>(
  ?!@typeVarMap inPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions) {
  <factor>( !?inPlacesMap, !?ioConstantMap, ?outPreConditions)
  repeat
  while
    $&$
    <factor>( !?inPlacesMap, !?ioConstantMap, ?let right)
    outPreConditions = @typeAndExpression ( !outPreConditions, !right)
  end
}

//------------------------------------------------------------------------------------------------

rule <factor>(
  ?!@typeVarMap inPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions) {
 select
   $~$
   <factor>( !?inPlacesMap, !?ioConstantMap, ?outPreConditions)
   outPreConditions = @typeComplementExpression ( !outPreConditions)
  or
   <primary>( !?inPlacesMap, !?ioConstantMap, ?outPreConditions)
  end
}

//------------------------------------------------------------------------------------------------

rule <primary>(
  ?!@typeVarMap inPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePreconditionExpression outPreConditions) {
  select
    $($
    <parse_precondition>( !?inPlacesMap, !?ioConstantMap, ?outPreConditions)
    $)$
  or
    $true$
    outPreConditions = @typeTrueExpression ()
  or
    $false$
    outPreConditions = @typeFalseExpression ()
  or
    ${$
    $identifier$( ?let name)
    inPlacesMap.searchKey (!name, ?let idx)
    select
      $==$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeEqualExpression ( !idx, !sign, !cst)
    or
      $!=$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeNonEqualExpression ( !idx, !sign, !cst)
    or
      $<=$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeInfOrEqualExpression ( !idx, !sign, !cst)
    or
      $>=$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeSupOrEqualExpression ( !idx, !sign, !cst)
    or
      $<$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeStrictInfExpression ( !idx, !sign, !cst)
    or
      $>$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      outPreConditions = @typeStrictSupExpression ( !idx, !sign, !cst)
    end
    $}$
  end
}

//------------------------------------------------------------------------------------------------

rule <parse_constant>(
  ?!@typeCstMap ioConstantMap,
  !@bool outSign,
  !@luint outValue) {
  select
    $identifier$( ?let constantName)
    ioConstantMap.searchKey (!constantName, ?outSign, ?outValue)
  or
    $-$
    outSign = true
    $literal_integer$( ? outValue)
  or
    outSign = false
    $literal_integer$( ? outValue)
  end
}

//------------------------------------------------------------------------------------------------

rule <parse_postcondition>(
  ?!@typeVarMap outPlacesMap,
  ?!@typeCstMap ioConstantMap,
  !@typePostconditionList outPostConditionsList) {
  outPostConditionsList = @typePostconditionList ()
  repeat
    $identifier$( ?let name)
    outPlacesMap.searchKey (!name, ?let idx)
    let @typePostcondition p
    select
      $--$
      p = @typePostDecrement ( !name, !idx)
    or
      $++$
      p = @typePostIncrement ( !name, !idx)
    or
      $+=$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      p = @typeAddConstant ( !name, !idx, !sign, !cst)
    or
      $-=$
      <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
      p = @typeSubConstant ( !name, !idx, !sign, !cst)
    or
      $:=$
      select
        <parse_constant>( !?ioConstantMap, ?let sign, ?let cst)
        p = @typeAssignConstant ( !name, !idx, !sign, !cst)
      or
        $infinity$
        p = @typeAssignInfinity ( !name, !idx)
      end
    end
    !?outPostConditionsList.append (p)
  while
    $,$
  end
}

//------------------------------------------------------------------------------------------------

rule <parse_bound>(
 !@uint lowTemporalBound,
 !@uint highTemporalBound) {
  lowTemporalBound = 0
  highTemporalBound = 0
}

//------------------------------------------------------------------------------------------------

rule <parse_bound>(
 !@uint lowTemporalBound,
 !@uint highTemporalBound) {
  $[$
  $literal_integer$( ?let low)
  $,$
  $literal_integer$( ?let high)
  $]$
  lowTemporalBound = low.uint
  highTemporalBound = high.uint
  if lowTemporalBound > highTemporalBound then
    error high : "High bound must be greater than or equal to low bound" 
  end
}

//------------------------------------------------------------------------------------------------

rule <axiome>(
  !@uint outHashMapSize,
  !@uint outGarbagePeriod,
  !@typeVarMap outPlacesMap,
  !@typeTransitionList outTransitionList,
  !@typeInitialMarkingList outInitialMarkingList,
  !@countList outCountList) {
  $system$
//--- Options
  select
    $hashmapsize$
    $literal_integer$( ?let n)
    $;$
    outHashMapSize = n.uint
  or
    outHashMapSize = 16
  end
  select
    $garbageperiod$
    $literal_integer$( ?let n)
    $;$
    outGarbagePeriod = n.uint
  or
    outGarbagePeriod = 16
  end
  outTransitionList = @typeTransitionList ()
  outPlacesMap = @typeVarMap ()
  var constantMap = @typeCstMap ()
  outCountList = @countList ()
  repeat
//--- constant
  while
    $const$
    $identifier$( ?let constantName)
    $=$
    <parse_constant>( !?constantMap, ?let sign, ?let value)
    !?constantMap.insertKey (!constantName, !sign, !value)
    $;$
//--- Variables
  while
    $var$
    repeat
      $identifier$( ?let placeName)
      !?outPlacesMap.insertKey (!placeName, !outPlacesMap.count ())
    while
      $,$
    end
    $;$
//--- Rule
  while
    $rule$
    $literal_string$( ?let transitionName)
    <parse_precondition>( !?outPlacesMap, !?constantMap, ?let preConditions)
    <parse_bound>( ?let lowTemporalBound, ?let highTemporalBound)
    $:$
    <parse_postcondition>( !?outPlacesMap, !?constantMap, ?let postConditions)
    $;$
    !?outTransitionList.append (
      transitionName,
      preConditions,
      postConditions,
      lowTemporalBound,
      highTemporalBound
    )
  end
//--- Init
  $init$
  outInitialMarkingList = @typeInitialMarkingList ()
  repeat
    $identifier$( ?let placeName)
    outPlacesMap.searchKey (!placeName, ?let placeID)
    $:=$
    select
      <parse_constant>( !?constantMap, ?let sign, ?let cst)
      let @typePostcondition initValue = @typeAssignConstant ( !placeName, !placeID, !sign, !cst)
      !?outInitialMarkingList.append (initValue)
    or
      $infinity$
      let @typePostcondition initValue = @typeAssignInfinity ( !placeName, !placeID)
      !?outInitialMarkingList.append (initValue)
    end
  while
    $,$
  end
  $;$
//--- Count list
  repeat
  while
    $count$
    $literal_string$( ?let name)
    $:$
    <parse_precondition>( !?outPlacesMap, !?constantMap, ?let conditions)
    $;$
    !?outCountList.append (name, conditions)
  end
  $end$
}

}